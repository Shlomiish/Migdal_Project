pipeline {
    agent { label 'Dynamic_Host' }

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('DockerHub_Credentials')
        DOCKER_IMAGE_NAME = "migdal_project"
        DOCKER_REPO = "shlomi00212"
        K8S_MANIFESTS_REPO_URL = 'https://gitlab.com/shlomi.shosha/manifest_repo.git'
        APP_REPO_URL = 'https://gitlab.com/shlomi.shosha/app_repo.git'
        BRANCH_NAME = 'main'
        GITLAB_TOKEN = credentials('gitlab-token')
    }
    
    stages {
        stage('Checkout Repository') {
            steps {
                script {
                    git(
                        url: "${APP_REPO_URL}",
                        branch: BRANCH_NAME
                    )
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                    sudo docker build -t ${DOCKER_IMAGE_NAME} .
                    '''
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    sh '''
                    sudo docker rm -f hello_world_app || true
                    sudo docker run -d -p 5000:5000 --name hello_world_app ${DOCKER_IMAGE_NAME}
                    '''
                }
            }
        }

        stage('Smoke Test') {
            steps {
                script {
                    sh 'sleep 5'
                    def result = sh(script: 'curl --fail http://localhost:5000/', returnStatus: true)
                    if (result != 0) {
                        error("Smoke test failed! Aborting pipeline.")
                    } else {
                        echo "Smoke test passed!"
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'DockerHub_Credentials', 
                                                      usernameVariable: 'DOCKER_USERNAME', 
                                                      passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                            echo ${DOCKER_PASSWORD} | sudo docker login -u ${DOCKER_USERNAME} --password-stdin
                            sudo docker tag ${DOCKER_IMAGE_NAME} ${DOCKER_REPO}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}
                            sudo docker tag ${DOCKER_IMAGE_NAME} ${DOCKER_REPO}/${DOCKER_IMAGE_NAME}:latest
                            
                            echo "Pushing image with tag: ${BUILD_NUMBER}"
                            sudo docker push ${DOCKER_REPO}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}
                            
                            echo "Pushing latest tag"
                            sudo docker push ${DOCKER_REPO}/${DOCKER_IMAGE_NAME}:latest
                            
                            sudo docker logout
                        '''
                    }
                }
            }
        }

        stage('Checkout K8s Manifests') {
            steps {
                script {
                    git(
                        url: "${K8S_MANIFESTS_REPO_URL}",
                        branch: BRANCH_NAME
                    )
                    sh 'ls -l'
                }
            }
        }

        stage('Update Deployment YAML') {
            steps {
                script {
                    sh '''
                    if [ -f deployment.yml ]; then
                        sed -i "s|image:.*|image: ${DOCKER_REPO}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}|" deployment.yml
                        echo "Updated deployment.yml with image ${DOCKER_REPO}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}"
                        cat deployment.yml
                    else
                        echo "deployment.yml not found!"
                        exit 1
                    fi
                    '''
                }
            }
        }

        stage('Push Updated Deployment to GitLab') {
            steps {
                withCredentials([string(credentialsId: 'gitlab-token', variable: 'GITLAB_TOKEN')]) {
                    script {
                        sh '''
                            git config user.name "shlomi.shosha"
                            git config user.email "shlomi.shosha@gmail.com"
                            
                            git add deployment.yml
                        
                            git commit -m "Updated deployment image to ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}"
                                
                            git push https://gitlab.com/shlomi.shosha/manifest_repo.git ${BRANCH_NAME}
                            
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            cleanWs()
        }
    }
}
